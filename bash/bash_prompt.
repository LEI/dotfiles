#!/bin/bash
#
# Shell prompt based on the Solarized Dark theme.

# Ensure dotfiles path is set
# if [ -n "$DOFILES" ];
# then
# 	DOTFILES="$HOME/.dotfiles"
# fi

source $DOTFILES/script/lib/colors

prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi

		fi

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${1}${branchName}${blue}${s}";
	else
		return;
	fi
}

# Display exit status.
function exitstatus {

	EXITSTATUS="$?";

	STATUS="\r"; # \r\n

	if [ "${EXITSTATUS}" != 0 ]; then
		STATUS+="${red}× ";
	#else
		#STATUS+="${green}✓ ";
	fi

	echo -ne "$STATUS${reset}";
}

PROMPT_COMMAND=exitstatus;

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${red}";
else
	userStyle="${cyan}";
fi

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${orange}";
else
	hostStyle="${reset}";
fi

# Set the terminal title to the current working directory.
PS1="\[\033]0;\w\007\]";

# Time
#PS1+="\[${reset}\]\t ";

# Username
PS1+="\[${userStyle}\]\u ";

# Host
if [[ "${SSH_TTY}" ]]; then
	PS1+="\[${reset}\]at ";
	PS1+="\[${hostStyle}\]\h ";
fi

# Working directory
PS1+="\[${reset}\]in ";
PS1+="\[${white}\]\w";

# Git repository details
PS1+="\$(prompt_git \"${reset} on ${yellow}\")";

PS1+="\n";
PS1+="\[${white}\]→ \[${reset}\]"; # $
export PS1;

PS2="\[${yellow}\]→ \[${reset}\]";
export PS2;
