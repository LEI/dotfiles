" ~/.vimrc
"
" Autoload plugins
runtime bundle/pathogen/autoload/pathogen.vim
execute pathogen#infect()
Helptags

set nocompatible

" Settings -------------------------------------------------------------------

" Use UTF-8 without BOM
set encoding=utf-8 nobomb

set shell=/bin/bash

set numberwidth=3
" Use relative line numbers
"if exists("&relativenumber")
"	set relativenumber
"	au BufReadPost * set relativenumber
"endif
" Enable line numbers
set number

" Highlight current line
set cursorline
" Highlight searches
set hlsearch

" Show “invisible” characters
set list
set lcs=tab:▸\ ,trail:·,eol:¬,nbsp:_,extends:❯,precedes:❮
" set showbreak=↪

" Tabs -o spaces
set smartindent
"set expandtab
set tabstop=4
set shiftwidth=4
" Wrapping
set textwidth=80
" Don't try to highlight lines longer than 800 characters
set synmaxcol=800

" Don’t add empty newlines at the end of files
set binary
set noeol

" Centralize backups, swapfiles and undo history
set backupdir=~/.vim/backups
set directory=~/.vim/swaps
if exists("&undodir")
	set undodir=~/.vim/undo
endif
" Don’t create backups when editing files in certain directories
set backupskip=/tmp/*,/private/tmp/*

" set visualbell

" Color scheme

" Enable syntax highlighting
syntax on

if has('gui_running')
	set background=light
else
	set background=dark
endif

" let g:solarized_termcolors=256
let g:solarized_contrast = "high"
colorscheme solarized

" Color the 80th column differently as a wrapping guide
if exists('+colorcolumn')
	set colorcolumn=80
endif

" Plugins --------------------------------------------------------------------

" Airline

let g:airline_powerline_fonts = 1
" let g:airline_left_sep = ''
" let g:airline_right_sep = ''
" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1
" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'

" NERDTree

" Open automatically if no files were specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif 
" Show hidden files by default
let NERDTreeShowHidden=1

" ----------------------------------------------------------------------------

set hidden

" Change mapleader
let mapleader=","

" https://joshldavis.com/2014/04/05/vim-tab-madness-buffers-vs-tabs/
" Open a new empty buffer
nmap <leader>T :enew<CR>
" Move to the next buffer
nmap <leader>l :bnext<CR>
" Move to the previous buffer
nmap <leader>h :bprevious<CR>
" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
nmap <leader>bq :bp <BAR> bd #<CR>
" Show all open buffers and their status
nmap <leader>bl :ls<CR>


" Save a file as root (,W)
noremap <leader>W :w !sudo tee % > /dev/null<CR>

" https://bitbucket.org/sjl/dotfiles/src/tip/vim/vimrc
" https://github.com/mathiasbynens/dotfiles/blob/master/.vimrc ---------------

" Use the OS clipboard by default (on versions compiled with `+clipboard`)
set clipboard=unnamed
" Enhance command-line completion
set wildmenu
" Allow cursor keys in insert mode
set esckeys
" Allow backspace in insert mode
set backspace=indent,eol,start
" Optimize for fast terminal connections
set ttyfast
" Add the g flag to search/replace by default
set gdefault

" Respect modeline in files
set modeline
set modelines=4
" Enable per-directory .vimrc files and disable unsafe commands in them
set exrc
set secure

" Ignore case of searches
set ignorecase
" Highlight dynamically as pattern is typed
set incsearch
" Always show status line
set laststatus=2
" Enable mouse in all modes
set mouse=a
" Disable error bells
set noerrorbells
" Don’t reset cursor to start of line when moving around.
set nostartofline
" Show the cursor position
set ruler
" Don’t show the intro message when starting Vim
set shortmess=atI
" Show the current mode
set showmode
" Show the filename in the window titlebar
set title
" Show the (partial) command as it’s being typed
set showcmd

" Start scrolling three lines before the horizontal window border
set scrolloff=3

" Strip trailing whitespace (,ss)
function! StripWhitespace()
	let save_cursor = getpos(".")
	let old_query = getreg('/')
	:%s/\s\+$//e
	call setpos('.', save_cursor)
	call setreg('/', old_query)
endfunction
noremap <leader>ss :call StripWhitespace()<CR>

" Automatic commands
if has("autocmd")
	" Enable file type detection
	filetype on
	" Treat .json files as .js
	autocmd BufNewFile,BufRead *.json setfiletype json syntax=javascript
	" Treat .md files as Markdown
	autocmd BufNewFile,BufRead *.md setlocal filetype=markdown
endif

set noshowmode

