#!/bin/bash
#
# Bootstrap dotfiles

# Set working directory
cd "$(dirname "$0")/.."

SOURCE_DIR=$(pwd)
TARGET_DIR=$HOME

export DOTFILES=$SOURCE_DIR

# if [ -e "$SOURCE_DIR/bootstrap/config" ]
# then
# 	source $SOURCE_DIR/bootstrap/config
# else
# 	echo "$cfg file needed. See config.json.example for directions and copy it to config.json."
# 	exit 1
# fi

set -e

# Import functions
lib=$SOURCE_DIR/bootstrap/lib
source $lib/colors
source $lib/print
source $lib/prompt
source $lib/link

# Print command line usage
echo_usage () {
	$lib/usage
	exit 0
}

# Parse arguments and unset recognized ones
parse_flags () {
	local args=$1

	for (( i = ${#args[@]} - 1; i >= 0; i-- )); do
		case ${args[i]} in
			-d|--default)
				force_default=true
				unset args[i] ;;
			-f|--force)
				force=true
				unset args[i] ;;
			-m|--mute)
				mute=true
				unset args[i] ;;
			-s|--sandbox)
				sandbox
				unset args[i] ;;
			-t|--test)
				debug=true
				unset args[i] ;;
			-h|--help)
				echo_usage
				unset args[i] ;;
			-*) echo "Unrecognized option: ${args[i]}"
				echo_usage
				unset args[i] ;;
		esac
	done

	# Print echo_usage if > 1 argument left
	[ ${#args[@]} -gt 1 ] && echo_usage

	echo ${args[0]}
}

check_file () {
	local file=$1

	if [ -f $file ]
	then
		success "Already exists" "$file"
		return 1
	else
		return 0
	fi
}

source_file () {
	local file=$1

	if source "$file"
	then
		success "Operation successfull !"
	else
		fail "Command failed !"
	fi
}

sandbox () {
	TARGET_DIR=$TARGET_DIR/sandbox
	info "$TARGET_DIR" "Using sandbox folder"

	if [ ! -d $TARGET_DIR ]; then
		mkdir $TARGET_DIR
	fi
}

setup_gitconfig () {
	git_credential="cache"

	[ "$(uname -s)" == "Darwin" ] && git_credential="osxkeychain"

	user "What is your github author name ? "
	read -e GIT_AUTHOR_NAME
	user "What is your github author email ? "
	read -e GIT_AUTHOR_EMAIL

	sed -e "s/AUTHORNAME/$GIT_AUTHOR_NAME/g" \
		-e "s/AUTHOREMAIL/$GIT_AUTHOR_EMAIL/g" \
		-e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" \
		git/gitconfig.example > git/gitconfig

	success "Git credentials generated."
}

brew_bundle () {
	# if [ ! -n $HOMEBREW_CASK_OPTS ]
	# then
	# 	export HOMEBREW_CASK_OPTS="--appdir=/Applications"
	# fi

	local file=setup/$1file

	info "brew bundle $file" "..."

	if [ -f "$file" ] && brew bundle "$file" # 2> /dev/null
	then
		success "$1 successfully bundled !"
	else
		fail "$1 failed to bundle !"
	fi
}

install () {

	# Configure git
	# check_file "git/gitconfig" && \
	# 	ask "Configure git credentials ?" Y && \
	# 	setup_gitconfig || \
	# 	skipped

	local exclude=("gitconfig." ".DS_Store")
	local ignore=("vimrc." "gvimrc." ".gitignore" ".DS_Store")

	symlink "" link_dotfile ${exclude[@]} && success "Dot done."
	symlink "bin" link_file && success "Bin done."
	symlink ".vim" link_file ${ignore[@]} && success "Vim done."

	# ask "Symlink ?" Y && \
	# 	symlink "bin" link_file && \
	# 	symlink ".vim" link_file \
	# 		"vimrc" "gvimrc" && \
	# 	symlink ".vim" link_dotfile \
	# 		"backups" "colors" "swaps" "undo" && \
	# 	symlink "git" link_dotfile \
	# 		"gitconfig.example" && \
	# 	symlink "bash" link_dotfile && \
	# 	success "Done." || \
	# 	skipped

	# Install dependencies and programs
	# ask "Bundle ?" && \
	# 	brew_bundle "Brew" && \
	# 	brew_bundle "Cask" || \
	# 	skipped

	# Set OS defaults
	# ask "Set defaults ?" && \
	# 	source_file "script/defaults" || \
	# 	skipped



		#cfg "git/destination" && \
		#cfg "git/exception" || \

	# Install Homebrew.
	# if [[ "$OSTYPE" =~ ^darwin ]] && [[ ! "$(type -P brew)" ]]; then
	# 	heading "Installing Homebrew"

	# 	#Skip the "Press enter to continueâ€¦" prompt.
	# 	true | ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)"
	# fi

}

# Get command
args=("$@")
cmd=$(parse_flags $args)

sandbox

# Execute command
case $cmd in
	'')          install ;;
	'install')   install ;;
	'uninstall') uninstall ;;
	'brew')      brew_bundle "Brew" ;;
	'cask')      brew_bundle "Cask" ;;
	*)           install;; #echo_usage ;;
esac
