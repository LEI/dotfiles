#!/bin/bash
#
# Bootstrap dotfiles
# Mainly inspired from mathiasbynens/dotfiles and holman/dotfiles

# Set working directory
cd "$(dirname "$0")"

set -e

DOTFILES_DIR=$(pwd)
TARGET_DIR=$HOME

export DOTFILES

indent_level=1
indent_size=3

# Get command
args=("$@")
debug=
mute=
force_default=
force_all=
reset_colors=
verbose=

# Get config
lib=$DOTFILES_DIR/lib
CONFIG_FILE=$DOTFILES_DIR/config
source $lib/readconf

init_bootstrap () {
	# Cfg vars rdy
	DOTFILES=$DIRECTORY
	echo "bootfiles dotstrap $VERSION"
	#git pull origin master

	# Import functions
	source $lib/utils
	source $lib/print
	source $lib/ask
	source $lib/dir
	source $lib/file
	source $lib/link
	source $lib/git
	source $lib/brew
}

# Print command line usage
echo_usage () {
	. $lib/usage
}

echo_debug () {
	if [ "$debug" = true ]; then
		info "Debug is enabled." " " true
		#info "Symbolic dry run" "Changes are not applied while debugging" true
	fi
}

do_gitconfig () {
	# Create git/.gitconfig if needed
	local gitconfig_file="git/gitconfig."
	if check_file "$gitconfig_file" Y; then
		if ask "Configure git credentials ?" Y true; then
			gitconfig
		else
			skipped
		fi
	else
		warn "Git configuration already file exists" "~${DOTFILES_DIR#$HOME}/$gitconfig_file"
	fi
}

do_link () {
	if ask "Create symbolic links ?" Y true; then
		echo_debug
		# find $DOTFILES -name *.
		dir "" link_dotfile ${symlink_ignore[@]} || skipped
		dir "bin" link_file ${global_ignore[@]} || skipped
		echo ''
		success "Stuff linked."
	else
		skipped "symlinks"
	fi
}

undo_link () {
	if ask "Erase symbolic links ?" Y true; then
		echo_debug
		dir "" unlink_dotfile ${symlink_ignore[@]} || skipped
		dir "bin" unlink_file ${global_ignore[@]} || skipped
		echo ''
		success "Symlinks unchained."
	else
		skipped "symlinks"
	fi
}

do_copy () {
	if ask "Copy directoriz ?" Y true; then
		echo_debug
		# find $DOTFILES -name ".*" -maxdepth 1
		for folder in ${directoriz[@]}; do
			eval "local folder_ignore=\${${folder#.}_ignore[@]}"
			copy $folder ${folder_ignore[@]} || skipped
		done
		echo ''
		success "Stuff copied."
	else
		skipped "directoriz"
	fi
}

undo_copy () {
	if ask "Remove directoriz ?" Y true; then
		echo_debug
		for folder in ${directoriz[@]}; do
			eval "local folder_ignore=\${${folder#.}_ignore[@]}"
			dir "$folder" remove ${folder_ignore[@]} || skipped
		done

		echo ''
		success "Stuff removed."
	else
		skipped "directoriz"
	fi
}

# OS specific configuration
do_defaults () {
	if ask "Set defaults ?" Y true; then
		((indent_level++))

		local defaults=$DOTFILES_DIR/defaults
		if source_file $defaults; then
			((indent_level--))
			success "Stuff configured."
		else
			((indent_level--))
			warn "Configuration did not fully complete" "[defaults]"
		fi
	else
		skipped "defaults"
		((indent_level++))
	fi

	((indent_level--))
}

do_setup () {
	# Install deps & utils with homebrew
	if ask "Download dependencies ?" N true; then
		((indent_level++))

		local setup=$DOTFILES_DIR/setup
		if source_file $setup; then
			((indent_level--))
			success "Stuff installed."
		else
			((indent_level--))
			warn "Dependencies did not fully installed" "[setup]"
		fi
	else
		skipped "setup"
		((indent_level++))
	fi

	((indent_level--))
}
count=
sandbox () {
	TARGET_DIR="$TARGET_DIR/sandbox"
	info "$TARGET_DIR" "Using sandbox folder"

	echo $TARGET_DIR
	if [ ! -d $TARGET_DIR ]; then
		echo $TARGET_DIR
	fi
	echo "$count"
	if [ "$count" = true ]; then exit; fi
	count=true
}

# New line
n_l () { echo ''; indent_level=1; }

install () {
	echo ''

	# Git
	do_gitconfig; n_l

	# Symbolic links
	do_link; n_l

	# Directories
	do_copy; n_l

	# Set OS defaults

	info "Using $(uname) specific configuration" " " true; n_l

	do_defaults; n_l

	# Dependencies
	do_setup; n_l
}

uninstall () {
	echo ''

	# Does not undo bundles & defaults

	# Symbolic links
	undo_link; n_l

	# Directories
	undo_copy;n_l

	end_message="Bootstrap uninstalled things."
}

# Execute command
bootstrap () {
	case $1 in
		'')          install ;;
		'install')   install ;;
		'uninstall') uninstall ;;
		'link')      do_link ;;
		'copy')      do_copy ;;
		'defaults')  do_defaults ;;
		'setup')     source_file $DOTFILES_DIR/setup ;;
		*)           echo_usage ;;
	esac
}

# Init
if init_bootstrap; then

	# Parse arguments and unset recognized ones
	for (( i = ${#args[@]} - 1; i >= 0; i-- )); do
		case ${args[i]} in
			-a|--auto) unset args[i]
				force_default=true
				;;
			-d|--debug) unset args[i]
				debug=true
				;;
			-f|--force) unset args[i]
				force_all=true
				;;
			-h|--help) unset args[i]
				echo_usage
				;;
			-t|--test) unset args[i]
				TARGET_DIR="$TARGET_DIR/sandbox"
				[ ! -d $TARGET_DIR ] && mkdir $TARGET_DIR
				info "$TARGET_DIR" "Using sandbox folder"
				;;
			-u|--ugly) unset args[i]
				reset_colors=true
				;;
			-v|--verbose) unset args[i]
				verbose=true
				;;
			-*) fail "${args[i]}" "Unknown option"
				echo_usage
				unset args[i] ;;
		esac
	done

	# Print echo_usage if > 1 argument left
	[ ${#args[@]} -gt 1 ] && echo_usage

	cmd=${args[@]}

	# Start
	bootstrap $cmd

	# End
	indent_level=0
	[ -n "$end_message" ] || end_message="Things were bootstrapped !"
	success "$end_message" " "

	# Can't get this to work
	# source ~/.bash_profile || fail "~/.bash_profile"
else
	die "An error occured while preparing bootstrap"
fi
