#!/bin/bash
#
# Bootstrap dotfiles

# Set working directory
cd "$(dirname "$0")"

DOTFILES_DIR=$(pwd)
TARGET_DIR=$HOME

export DOTFILES=$DOTFILES_DIR

# Get command
args=("$@")

# if [ -e "$DOTFILES_DIR/config" ]
# then
# 	source $DOTFILES_DIR/config
# else
# 	echo "$cfg file needed. See config.sample for directions and copy it to config.sample."
# 	exit 1
# fi

set -e

# Import functions
lib=$DOTFILES_DIR/lib
source $lib/print
source $lib/ask
source $lib/dir
source $lib/link
source $lib/gitconfig
source $lib/brew

check_file () {
	local file=$1

	if [ -f $file ]; then
		return 1
	else
		return 0
	fi
}

source_file () {
	local file=$1

	if [ -f $file ] && source "$file"; then
		#success "Operation successfull !"
		return 1
	else
		#fail "Command failed !"
		return 0
	fi
}

sandbox () {
	TARGET_DIR=$TARGET_DIR/sandbox
	info "$TARGET_DIR" "Using sandbox folder"

	if [ ! -d $TARGET_DIR ]; then
		mkdir $TARGET_DIR
	fi
}

# Print command line usage
echo_usage () {
	$lib/usage
	exit 0
}

# Parse arguments and unset recognized ones
parse_flags () {
	local args=$1

	for (( i = ${#args[@]} - 1; i >= 0; i-- )); do
		case ${args[i]} in
			-d|--default)
				force_default=true
				unset args[i] ;;
			-f|--force)
				force=true
				unset args[i] ;;
			-m|--mute)
				mute=true
				unset args[i] ;;
			-s|--sandbox)
				sandbox
				unset args[i] ;;
			-t|--test)
				debug=true
				unset args[i] ;;
			-h|--help)
				echo_usage
				unset args[i] ;;
			-*) echo "Unrecognized option: ${args[i]}"
				echo_usage
				unset args[i] ;;
		esac
	done

	# Print echo_usage if > 1 argument left
	[ ${#args[@]} -gt 1 ] && echo_usage

	echo ${args[0]}
}


uninstall () {
	# Does not undo bundles & defaults

	# Remove bin/* and */*.symlink
	# ask "Remove symbolic links ?" Y && \
	# 	info "Unlinking bin files" "..." && \
	# 	dir "/bin" "" unlink && \
	# 	info "Unlinking dotfiles" "..." && \
	# 	dir "/" "*.symlink" unsymlink && \
	# 	success 'Symlinks unchained.' || \
	# 	skip

	# Remove .vim
	# TODO Symlink
	# ask "Remove .vim directory ?" Y && \
	# 	remove ".vim" || \
	# 	skip

	echo ''
	echo 'Bootstrap uninstalled things.'
}

install () {
	# All started here
	echo 'dotfiles bootrapper'
	echo ''

	# Create git/.gitconfig if needed
	if check_file "git/gitconfig." Y; then
		if ask "Configure git credentials ?" Y; then
			gitconfig
		else
			skipped
		fi
	else
		warn "Git configuration already file exists" " "
	fi

	echo ''

	# Ignore lists
	local global_ignore=(".DS_Store" ".gitignore" "README.md" ".git" "gitconfig.sample")
	local vim_ignore=(${global_ignore[@]} "vimrc." "gvimrc.")
	# Symbolic links
	if ask "Create symbolic links ?" Y true; then
		[ "$debug" = true ] && info "Symbolic dry run" "Changes are not applied while debugging" true
		dir "" link_dotfile ${global_ignore[@]} || skipped
		dir "bin" link_file || skipped
		dir ".vim" link_file ${vim_ignore[@]} || skipped
	else
		skipped
	fi

	echo ''

	# Set OS defaults
	local defaults=$DOTFILES_DIR/lib/defaults
	source_file $defaults || success "Defaults sourced" "lib/defaults"

	echo ''

	# Install deps & utils
	local setup=$DOTFILES_DIR/lib/setup
	source_file $setup || success "Deps sourced" "lib/setup"
	info "'set-up' is an alias to this step" "bin/set-up" true


		#cfg "git/destination" && \
		#cfg "git/exception" || \

	indent_level=0

	echo ''
	success "Things were bootstrapped !" " "
}

bootstrap () {
	cmd=$(parse_flags $args)
	echo "cmd $cmd"
	indent_level=1
	indent_size=3

	# Execute command
	case $cmd in
		'')          install ;;
		'install')   install ;;
		'uninstall') uninstall ;;
		'brew')      brew_bundle "Brew" ;;
		'cask')      brew_bundle "Cask" ;;
		*)           install ;;
	esac
}

bootstrap
