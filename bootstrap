#!/bin/bash
#
# Bootstrap dotfiles
# Mainly inspired from mathiasbynens/dotfiles and holman/dotfiles

# Set working directory
cd "$(dirname "$0")"

DOTFILES_DIR=$(pwd)
TARGET_DIR=$HOME
indent_level=1
indent_size=3

export DOTFILES=$DOTFILES_DIR
export lib=$DOTFILES_DIR/lib

# Get command
args=("$@")
debug=
mute=
force_default=
force_all=
reset_colors=
verbose=

set -e

do_setup () {
	# TODO Configuration file
	# if [ -e "$DOTFILES_DIR/config" ]
	# then
	# 	source $DOTFILES_DIR/config
	# else
	# 	echo "$cfg file needed. See config.sample for directions and copy it to config."
	# 	exit 1
	# fi
	# Ignore lists
	global_ignore=(".DS_Store" ".gitignore" "README.md" ".git" "gitconfig.sample")
	vim_ignore=(${global_ignore[@]} "vimrc." "gvimrc.")

	echo 'bootfiles dotstrap'

	#git pull origin master

	# Import functions
	source $lib/utils
	source $lib/print
	source $lib/ask
	source $lib/dir
	source $lib/file
	source $lib/link
	source $lib/git
	source $lib/brew
}

# Print command line usage
echo_usage () {
	$lib/usage
	exit 0
}

echo_debug () {
	if [ "$debug" = true ]; then
		info "Debug is enabled." " " true
		#info "Symbolic dry run" "Changes are not applied while debugging" true
	fi
}

do_gitconfig () {
	# Create git/.gitconfig if needed
	local gitconfig_file="git/gitconfig."
	if check_file "$gitconfig_file" Y; then
		if ask "Configure git credentials ?" Y; then
			gitconfig
		else
			skipped
		fi
	else
		warn "Git configuration already file exists" "$gitconfg_file"
	fi
}

do_link () {
	if ask "Create symbolic links ?" Y true; then
		echo_debug
		dir "" link_dotfile ${global_ignore[@]} || skipped
		dir "bin" link_file || skipped
		# COPY dir ".vim" link_file ${vim_ignore[@]} || skipped
		echo ''
		success "Stuff linked."
	else
		skipped "symlinks"
	fi
}

undo_link () {
	if ask "Erase symbolic links ?" Y true; then
		echo_debug
		dir "" unlink_dotfile ${global_ignore[@]} || skipped
		dir "bin" unlink_file ${global_ignore[@]} || skipped
		echo ''
		success "Symlinks unchained."
	else
		skipped "symlinks"
	fi
}

do_copy () {
	if ask "Copy directoriz ?" Y true; then
		echo_debug
		# TODO ${vim_ignore[@]} || lib/exclude
		copy ".vim" || skipped
		copy ".atom" || skipped
		echo ''
		success "Stuff copied."
	else
		skipped "directoriz"
	fi
}

undo_copy () {
	if ask "Remove directoriz ?" Y true; then
		echo_debug
		# TODO ${vim_ignore[@]} || lib/exclude
		# remove ".vim/*" || skipped
		# remove ".atom/*" || skipped
		dir ".vim" remove ${vim_ignore[@]} || skipped
		dir ".atom" remove || skipped
		echo ''
		success "Stuff removed."
	else
		skipped "directoriz"
	fi
}

do_defaults () {
	if ask "Set defaults ?" Y true; then
		local defaults=$DOTFILES_DIR/defaults
		source_file $defaults || \
			warn "Configuration didn't fully complete" "$DOTFILES_DIR/defaults"
		# success "Defaults loaded" "$DOTFILES_DIR/defaults"
		indent_level=1
		success "OS configuration done."
	else
		skipped "defaults"
	fi
}

sandbox () {
	TARGET_DIR=$TARGET_DIR/sandbox
	info "$TARGET_DIR" "Using sandbox folder"

	if [ ! -d $TARGET_DIR ]; then
		mkdir $TARGET_DIR
	fi
}

install () {
	echo ''

	# Git
	#####

	do_gitconfig

	echo ''; indent_level=1

	# Symbolic links
	################

	do_link

	echo ''; indent_level=1

	# Directories
	################

	do_copy

	echo ''; indent_level=1

	# Set OS defaults
	#################

	do_defaults
}

uninstall () {
	echo ''

	# Does not undo bundles & defaults

	undo_link

	echo ''; indent_level=1

	undo_copy

	end_message="Bootstrap uninstalled things."
}

# Execute command
bootstrap () {
	local cmd=$1

	case $cmd in
		'')          install ;;
		'install')   install ;;
		'uninstall') uninstall ;;
		'link')      do_link ;;
		'copy')      do_copy ;;
		'defaults')  do_defaults ;;
		'setup')     source_file $DOTFILES_DIR/setup ;;
		*)           echo_usage ;;
	esac
}

# Init
if do_setup; then

	# -?|--default)
	# 	force_default=true
	# 	unset args[i] ;;
	# -f|--force)
	# 	force_all=true
	# 	unset args[i] ;;
	# Parse arguments and unset recognized ones
	for (( i = ${#args[@]} - 1; i >= 0; i-- )); do
		case ${args[i]} in
			-d|--debug)
				debug=true
				unset args[i] ;;
			-h|--help)
				echo_usage
				unset args[i] ;;
			-s|--sandbox)
				echo sandbox
				unset args[i] ;;
			-u|--ugly)
				reset_colors=true
				unset args[i] ;;
			-v|--verbose)
				verbose=true
				unset args[i] ;;
			-*) echo "Unknown option: ${args[i]}"
				echo_usage
				unset args[i] ;;
		esac
	done

	export debug

	# Print echo_usage if > 1 argument left
	[ ${#args[@]} -gt 1 ] && echo_usage

	# Launch
	########

	bootstrap ${args[@]}

	echo ''
	indent_level=0

	# End
	[ -n "$end_message" ] || end_message="Things were bootstrapped !"
	success "$end_message" " "

	# Can't get this to work
	# source ~/.bash_profile || fail "~/.bash_profile"

fi
