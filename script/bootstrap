#!/bin/bash
#
# Bootstrap dotfiles
# Mainly inspired from mathiasbynens/dotfiles and holman/dotfiles

[ -n "$DOTFILES" ] || (echo "DOTFILES is undefined" && exit)

BOOTSTRAP_DIR="$(pwd)/$(dirname "$0")"

# Set working directory
cd "$(dirname "$0")/.."

# Globals
DOTFILES_DIR=$(pwd)
TARGET_DIR=$HOME
lib=$BOOTSTRAP_DIR/lib

# Get command
args=("$@")

# Declarations
debug=
mute=
force_default=
force_all=
reset_colors=
verbose=

set -e

init_bootstrap () {
	# Readying
	echo "bootfiles dotstrap $VERSION"
	echo "~${BOOTSTRAP_DIR#$HOME}/bootstrap"
	echo ''

	# Import functions
	source $lib/utils
	source $lib/link
	source $lib/fs
}

# Print command line usage
echo_usage () {
	. $lib/usage
}

echo_debug () {
	if [ "$debug" = true ]; then
		info "Debug is enabled." " " true
		#info "Symbolic dry run" "Changes are not applied while debugging" true
	fi
}

get_author () {
	local file=$1
	# Create the file if needed
	if [ ! -f "$file" ] && ask "Fill configuration file ?" Y true; then
		((indent_level++))
		NICK=$(prompt "What is your nickname ?")
		NAME=$(prompt "What is your full name ?")
		EMAIL=$(prompt "What is your email ?")
		sed -e "s/AUTHOR_NICK/\"$NICK\"/g" \
			-e "s/AUTHOR_NAME/\"$NAME\"/g" \
			-e "s/AUTHOR_EMAIL/\"$EMAIL\"/g" \
			$file.sample > $file
		((indent_level--))
		success "${file#$DOTFILES_DIR/}" "Successfully created"
	else
		success "${file#$DOTFILES_DIR/}" "Already exists" true
	fi
}

# Fill sample files
fill_files () {
	info "Using configuration file" "~${CONFIG_FILE#$HOME}"

	# Sample files
	for sample in ${sample_files[@]}; do
		local sample_param=(${sample//=/ })
		local cfg_name=${sample_param[0]}
		local cfg_path=${sample_param[1]}
		((indent_level++))
		# Create config file if needed
		if [ ! -f "$cfg_path" ]; then
			if ask "Create $cfg_path ?" Y; then
				fill_file "$cfg_name" "$cfg_path" "name" "email" "credential"
				success "$cfg_name" "$cfg_path created"
			else
				skipped "$cfg_name" "$cfg_path"
			fi
		else
			success "$cfg_name" "$cfg_path already exists" true
		fi
		((indent_level--))
	done
	success "$USER" "Profiles configured"

	echo ''
	info "$(uname)" "Specific steps" true
}

undo_config () {
	# TODO
	echo $(cat .gitignore)
}

# Install utils with homebrew
do_deps () {
	if ask "Install dependencies ?" N true; then
		((indent_level++))
		local setup=$BOOTSTRAP_DIR/setup
		if source_file $setup; then
			((indent_level--))
			success "Stuff installed."
		else
			((indent_level--))
			warn "Dependencies not fully installed" " "
		fi
	else
		skipped "dependencies"
	fi
}

do_link () {
	if ask "Create symbolic links ?" Y true; then
		dir "" link_dotfiles ${ignore_global[@]}
		dir "bin" link_files ${ignore_global[@]}
		success "Stuff linked."
	else
		skipped "symlinks"
	fi
}

undo_link () {
	if ask "Erase symbolic links ?" Y true; then
		dir "" unlink_dotfiles ${ignore_global[@]}
		dir "bin" unlink_files ${ignore_global[@]}
		success "Symlinks unchained."
	else
		skipped "symlinks"
	fi
}

do_copy () {
	if ask "Copy directories ?" Y true; then
		for dir in ${directories[@]}; do
			eval "local ignore_dir=\${ignore_${dir#.}[@]}"
			copy $dir ${ignore_dir[@]} || skipped
		done
		success "Stuff copied."
	else
		skipped "directories"
	fi
}

undo_copy () {
	if ask "Remove directories ?" Y true; then
		for dir in ${directories[@]}; do
			eval "local ignore_dir=\${ignore_${dir#.}[@]}"
			dir $dir remove ${ignore_dir[@]} || skipped
		done
		success "Stuff removed."
	else
		skipped "directories"
	fi
}

# OS specific configuration
do_defaults () {
	if ask "Set defaults ?" Y true; then
		((indent_level++))
		local defaults=$BOOTSTRAP_DIR/defaults
		if source_file $defaults; then
			((indent_level--))
			success "Stuff configured."
		else
			((indent_level--))
			warn "Configuration did not fully complete" "[defaults]"
		fi
	else
		skipped "defaults"
	fi
}

sandbox () {
	if [ ! -d $TARGET_DIR ]; then
		mkdir $TARGET_DIR
	fi

	TARGET_DIR="$TARGET_DIR/sandbox"
	info "$TARGET_DIR" "Using sandbox folder"
}

install () {
	# Pull last changes
	if [ -x "/usr/bin/git" ] && \
		ask "Pull last version from GitHub ?" Y true; then
		(git pull && \
			git submodule init && \
			git submodule update && \
			git submodule status && \
			success "git pup") || \
			fail "git pup"
		echo ''
	else
		skipped "git pup"
		echo ''
	fi

	get_author $DOTFILES_DIR/author
	readconf $DOTFILES_DIR/author
	readconf $BOOTSTRAP_DIR/config
	echo ''

	fill_files
	echo ''

	# Dependencies
	do_deps
	echo ''

	# Symbolic links
	do_link
	echo ''

	# Directories
	do_copy
	echo ''

	# Set OS defaults
	do_defaults
}

uninstall () {
	# TODO ? Does not undo bundles & defaults
	readconf $BOOTSTRAP_DIR/config
	echo ''

	# Symbolic links
	undo_link
	echo ''

	# Directories
	undo_copy

	end_message="Bootstrap uninstalled things."
}

# Run bootstrap with command
parse_flags () {
	if init_bootstrap; then
		# Parse arguments and unset recognized ones
		for (( i = ${#args[@]} - 1; i >= 0; i-- )); do
			case ${args[i]} in

				-a|--auto)
					force_default=true

					unset args[i] ;;

				-d|--debug)
					debug=true

					unset args[i] ;;

				-f|--force)
					force_all=true

					unset args[i] ;;

				-h|--help)
					echo_usage

					unset args[i] ;;

				-t|--test)
					TARGET_DIR="$TARGET_DIR/sandbox"
					[ ! -d $TARGET_DIR ] && mkdir $TARGET_DIR
					info "$TARGET_DIR" "Using sandbox folder"

					unset args[i] ;;

				-u|--ugly)
					reset_colors=true

					unset args[i] ;;

				-v|--verbose)
					verbose=true

					unset args[i] ;;

				-*)
					fail "${args[i]}" "Unknown option"
					echo_usage

					unset args[i] ;;

			esac
		done

		# Print echo_usage if > 1 argument left
		[ ${#args[@]} -gt 1 ] && echo_usage

		cmd=${args[@]}

		# Start
		bootstrap $cmd

	else
		echo "An error occured while preparing bootstrap"
	fi
}

# chmods, source returns
# ignore, conf, osx loc
# sync-home licences ssh rsync, [Dropbox](http://www.dropboxwiki.com/tips-and-tricks/using-the-official-dropbox-command-line-interface-cli)
# Ruby, compass.. http://www.npmjs.org/package/dotfiles
# https://github.com/thoughtbot/rcm
# http://dev.svetlyak.ru/dotfiler-en/
# [HomeSick](http://technicalpickles.com/posts/never-leave-your-dotfiles-behind-again-with-homesick/)
# [nstl](https://github.com/kautsig/dotfile-installer/blob/master/install.sh)
# [palette](https://github.com/altercation/solarized/tree/master/apple-colorpalette-solarized)
# [drpbx](http://coda.caseykuhlman.com/entries/2014/dropbox-as-a-settings-repository.html)
do_gitmodule () { # TOBOBTR
	if ask "Add a git submodule ?" Y true; then
		indent_level=1
		user "username/repository ?" "GitHub"
		read -e MODULE_NAME

		user "Path ?" "Relative to $DOTFILES"
		read -e MODULE_PATH

		git submodule add https://github.com/$MODULE_NAME.git $MODULE_PATH
		indent_level=0
	else
		skipped
	fi
}

# Execute command
bootstrap () {
	case $1 in
		'')           install ;;
		'install')    install ;;
		'uninstall')  uninstall ;;
		'link')       do_link ;;
		'copy')       do_copy ;;
		'defaults')   do_defaults ;;
		'setup')      do_deps ;;
		'module')     do_gitmodule ;;
		*)            fail "$1" "Unknown command"; echo_usage ;;
	esac
}

# Init
parse_flags

# End
indent_level=0
[ -n "$end_message" ] || end_message="Things were bootstrapped !"
echo ''; success "$end_message" " "
