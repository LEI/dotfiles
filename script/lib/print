#!/bin/bash
#
# Set of printing functions

# Import colors
lib=$BOOTSTRAP_DIR/lib
source $lib/colors

print () {
	# Don't print if mute is on
	[ -n "$mute" ] && return

	local icon_color=$1 icon=$2 label=$3 message=$4
	local text_color=$white column_size=42
	local highlight=$5 downlight=$6

	if [ "$message" = "" ]; then
		# Change style if label only
		text_color=""
	fi

	if [ "$highlight" = true ]; then
		if [ "$downlight" = true ]; then
			icon_color=$reset
		fi
		text_color=$icon_color
	fi

	# Reset color if --ugly
	if [ "$reset_colors" = true ]; then
		text_color=$reset
	fi

	# Set indentation
	[ -n "$indent_level" ] || indent_level=1
	[ -n "$indent_size" ] || indent_size=3
	local whitespaces=$((indent_level * indent_size))
	local column="%-$((column_size - whitespaces))s"
	local indent=""
	for ((i=1; i<=$whitespaces; i++)); do
		indent+=" "
	done

	printf "\r\033[2K$indent${icon_color}$icon  ${text_color}${column}${reset} $message${reset}\n" "$label"
}

# Highlight if the custom function third arg is true
# Downlight if the print() fifth arg is true

user () {
	print $blue ? "$1" "$2" "$3"
}

info () {
	print $white → "$1" "$2" "$3" true
}

warn () {
	print $yellow ! "$1" "$2" "$3" true
}

success () {
	print $green ✓ "$1" "$2" "$3" true
}

fail () {
	print $red × "$1" "$2" "$3"
}

die () {
	print $red × "$1" "$2" "$3"
	exit
}

skipped () {
	success "Skipped $1" "$2"
	return 0
}
