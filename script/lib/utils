#!/bin/bash
#
# Utility functions

# Import colors & print
source $lib/colors
source $lib/print

# Read configuration file
readconf () {
	CONFIG_FILE=$1
	while read line; do
		# Skip comments
		[[ ${line:0:1} == "#" ]] && continue
		# Skip empty lines
		[[ -z "${line}" ]] && continue
		eval ${line}
	done < "${CONFIG_FILE}"
}

# Basic prompt
prompt () {
	local question=$1

	user "$question" " " >&2
	read -e REPLY

	#[ -n "$REPLY" ] && echo "!reply"
	#[ -n "$REPLY" ] || echo "reply!"
	[ -n "$REPLY" ] || (prompt "$@" && return)

	echo "$REPLY"
}

# Prompt the user with a yes/no question
ask () {
	local question=$1 default=$2 highlight=$3
	local yesno
	local note

	case "$default" in
		Y) yesno="Y/n" ;;
		N|*) yesno="y/N" ;;
	esac

	user "$question" "($yesno)" $highlight

	if [ "$force_all" != true ] && [ "$force_default" != true ]; then
		read -s -n 1 key
		# Make enter reflect default
		[ "$key" = '' ] && key=$default
	elif [ "$force_default" = true ]; then
		# Use default without asking
		key=$default
		note=" (default)"
	else
		# Just do it
		key=Y
		note=" (forced)"
	fi

	# Set indentation
	local whitespaces=$(((indent_level + 1) * indent_size))
	local indent=""
	for ((i=1; i<=$((whitespaces)); i++)); do
		indent+=" "
	done

	# Return answer
	case "$key" in
		Y|y) echo "$indent>  Yes$note"
			return 0 ;;
		N|n|*) echo "$indent>  No$note"
			return 1 ;;
	esac
}

# Force prompt
confirm () {
	# Save variables
	local all=$force_all
	local default=$force_default
	# Delete before execution
	unset force_all
	unset force_default
	# Prompt the user
	ask "$@"
	# Reset to previous values
	force_all=$all
	force_default=$default
}

silent () {
	local whitespaces=$((indent_level * indent_size))
	local indent=""
	for ((i=1; i<=$whitespaces; i++)); do
		indent+=" "
	done
	if [ "$verbose" = true ] ; then
		eval "$@" | sed "s/^/$indent/"
	else
		eval "$@" >/dev/null | sed "s/^/$indent/" # (2|&)>/dev/null
	fi
}

fill_file () {
	local name=$(echo "$1" | tr '[:lower:]' '[:upper:]')
	local path=$2
	shift
	shift

	local sed_cmd="sed "
	for var in $@; do
		local variable=$(echo "$var" | tr '[:lower:]' '[:upper:]')
		local value=$(eval echo \$$variable)
		sed_cmd+="-e \"s/${name}_${variable}/$value/g\" "
	done
	sed_cmd+="${path}sample > ${path}"

	eval "$sed_cmd"
}

# join "delimiter" ${array[@]}
join () {
	# e.g.
	# join , (a b c)
	# -> a,b,c
	perl -e '$s = shift @ARGV; print join($s, @ARGV);' "$@";
}
