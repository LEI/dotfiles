#!/usr/bin/env bash

# https://www.chezmoi.io/reference/commands/docker/

set -euo pipefail

# EPHEMERAL="${EPHEMERAL:-false}"
# HEADLESS="${HEADLESS:-false}"
PROFILE="${PROFILE:-minimal}"

# WARN: podman does not support dockerfile_inline via docker compose
# Podman Engine 5.6.1 + Docker Compose version 2.39.4
PROVIDER="${PROVIDER:-docker}"
PREFIX="${PREFIX:-}" # termux prefix

usage() {
  echo >&2 "Usage: container [bootstrap|<image>]"
  echo >&2
  echo >&2 "Examples:"
  # echo >&2 "  container alpine ps --all"
  echo >&2 "  container alpine up --build --detach"
  echo >&2 "  container alpine logs --follow --since=1m"
  # echo >&2 "  container alpine attach --no-stdin"
  echo >&2
  echo >&2 "Images: alpine, archlinux, debian, ubuntu, fedora, termux"
}

container() {
  local build=
  local prefix="/opt" # "$HOME/.local/state"
  # prefix="$HOME/.local/share"
  local user=test # root
  # Environment must contain at least one element be a mapping
  local environment=()
  # NOTE: container is recreated when command changes
  local command=()
  local volumes=()
  local ports=()
  local networks=("test")
  # if [ -z "$tag" ]; then
  #   image="$name:latest"
  #   tag=latest
  # fi
  if [ -n "${GITHUB_TOKEN:-}" ]; then
    env+=("GITHUB_TOKEN=$GITHUB_TOKEN")
  fi
  case "${image%:*}" in
  alpine)
    environment+=(
      # "LANG=C"
    )
    build="apk update --quiet && apk add bash chezmoi curl sudo unzip"
    compose "$@"
    ;;
  android | termux)
    export user=a0_test
    # docker run -it --rm termux/termux-docker:latest bash -c "apt update && apt search example"
    image=docker.io/termux/termux-docker:x86_64
    # environment+=()
    # TODO: pre-select mirrors with termux-change-repo
    command+=()
    # PREFIX=/data/data/com.termux/files/usr
    prefix=/data/data/com.termux/files/home # /.local/state
    compose "$@"
    ;;
  archlinux)
    environment+=(
      # "LANG=C"
    )
    # pacman -Sy --needed --noconfirm --quiet sudo which
    build="pacman --sync --needed --noconfirm --quiet --refresh chezmoi sudo which"
    # user=$user
    # pacman --sync --needed --noconfirm --quiet --refresh sudo which
    # useradd -ms /bin/bash "$user"
    # usermod -aG wheel "$user"
    # sed -i 's/^# %wheel ALL=(ALL:ALL) NOPASSWD: ALL/%wheel ALL=(ALL:ALL) NOPASSWD: ALL/' /etc/sudoers
    # echo -n "$user:$user" | chpasswd -e "$user"
    compose "$@"
    ;;
  debian | ubuntu)
    if [ "$image" = ubuntu ]; then
      export user=ubuntu
      environment+=(
        "TZ=${TZ:-Etc/UTC}"
      )
    fi
    environment+=(
      "DEBIAN_FRONTEND=noninteractive"
      # "LANG=C"
    )
    build="apt-get update --quiet && apt-get install --no-install-recommends --quiet --yes ca-certificates curl locales sudo unzip" #  && rm -rf /var/lib/apt/lists/*
    compose "$@"
    ;;
  fedora)
    environment+=(
      # "LANG=C"
    )
    build="dnf update --assumeyes --quiet && dnf install -y -q chezmoi which unzip" # && dnf clean all
    compose "$@"
    ;;

  # freebsd)
  #   image=docker.io/freebsd/freebsd-runtime:15.0.beta2
  #   compose "$@"
  #   ;;

  # macOS
  # https://github.com/sickcodes/Docker-OSX#building-a-headless-osx-container
  # https://github.com/sickcodes/Docker-OSX/issues/492
  macos)
    # Arch: sudo pacman -S xorg-xhost && xhost +
    # Windows: /mnt/wslg/.X11-unix:/tmp/.X11-unix
    image=docker.io/sickcodes/docker-osx:latest # ${tag:-auto}
    environment+=(
      # "GENERATE_UNIQUE=true"
      # "MASTER_PLIST_URL="
      # "NONINTERACTIVE=1"
      # "OSX_COMMANDS='echo OK; ioreg -l | grep IOPlatformSerialNumber'"
    )
    volumes+=("/tmp/.X11-unix:/tmp/.X11-unix")
    ports+=("50922:10022")
    compose "$@"
    ;;
  *)
    echo >&2 "container: invalid image: $image"
    usage
    exit 1
    ;;
  esac
}

compose() {
  local bootstrap="./script/container bootstrap"
  local home=/root
  local working_dir="$home/.local/share/chezmoi"
  if [[ "$prefix" = */home ]]; then
    home="$prefix"
    working_dir=/dotfiles
  elif [ "$user" != root ]; then
    home="/home/$user"
  fi
  environment+=(
    # "CONTAINER_NAME=$name"
    # "CONTAINER_USER=$user"
    "USER=$user"
  )
  command+=(
    # "[ -f $prefix/install.done ] || touch $prefix/install.done"
    "$bootstrap"
  )
  volumes+=(
    "$HOME/.local/share/chezmoi:$working_dir"
    # "$HOME/.local/share/chezmoi:/root/.local/share/chezmoi"
  )
  if [ $# -eq 0 ]; then
    set -- ps --all
  # elif [ $# -gt 1 ] && [ "$1" = exec ]; then
  #   shift
  #   set -- exec -T "$name" "$@"
  # elif [ $# -gt 1 ] && [ "$1" = run ]; then
  #   shift
  #   # You have to remove (or rename) that container to be able to reuse that name
  #   local dir=chezmoi n=1
  #   set -- run --name="$dir-$name-$n" -T "$name" "$@"
  fi
  echo >&2 "$PROVIDER compose --file=- $*"
  compose_file="$(compose_file)"
  # if command -v yq >/dev/null; then
  #   if ! yq --output-format=yaml . >&2 <<<"$compose_file"; then
  #     echo >&2 "container: yaml error in compose file"
  #     echo >&2 "$compose_file"
  #   fi
  # else
  echo "$compose_file" >&2
  # fi
  $PROVIDER compose --file=- "$@" <<EOF
$compose_file
EOF
}

compose_file() {
  local interactive=true
  # local sh_args=eux
  # if [ "$interactive" = true ]; then
  #   sh_args="i$sh_args"
  # fi
  cat <<EOF
---
networks:
  test:
services:
  $name:
    # container_name: "${name}"
    hostname: "${name}"
    # image: "$image"
    build:
      context: .
$(if [ "$user" = ubuntu ]; then echo "      # network: host"; fi)
      # no_cache: true
      dockerfile_inline: |
        FROM $image

$(if [ -n "$build" ]; then echo "        RUN $build"; fi)
$(if [ "$user" = test ]; then
    echo "        USER $user"
    echo "        ENV HOME=/home/$user"
  fi)
    environment:
$(for e in "${environment[@]}"; do echo "      - $e"; done)
    # entrypoint: ["/bin/sh", "-ceiux"]
    command:
      - sh
      - -ceiux
      - |
$(for c in "${command[@]}"; do echo "        $c"; done)
$(if [ -n "${volumes[*]}" ]; then echo "    volumes:"; fi)
$(for v in "${volumes[@]}"; do echo "      - $v"; done)
$(if [ -n "${ports[*]}" ]; then echo "    ports:"; fi)
$(for v in "${ports[@]}"; do echo "      - $v"; done)
$(if [ -n "${networks[*]}" ]; then echo "    networks:"; fi)
$(for v in "${networks[@]}"; do echo "      - $v"; done)
    stdin_open: $interactive
    tty: $interactive
    user: "$(if [[ "$user" = *test ]]; then echo root; else echo "$user"; fi)"
    working_dir: "$working_dir"
EOF
}

# Runs in container
run_bootstrap() {
  # printenv
  local bootstrap=(./script/bootstrap --force --no-tty)
  # local user="${1:-$USER}"
  if [ -z "${USER:-}" ]; then
    USER="$(id --user --name)"
  fi
  if [ "$USER" != root ] && [ "$HOME" = /root ]; then
    HOME="/home/$USER"
    # echo >&2 "Invalid $USER home: $HOME"
    # exit 1
  fi

  # Ensure chezmoi is available
  BIN_DIR="$HOME/.local/bin"
  PATH="$PATH:$BIN_DIR"

  # Ensure bats is available for tests
  if [ -d /home/linuxbrew/.linuxbrew/bin ]; then
    PATH="$PATH:/home/linuxbrew/.linuxbrew/bin"
  fi

  # chezmoi package list mise
  if [ -z "${MISE_SHELL:-}" ] && chezmoi feature mise; then
    PATH="$PATH:$HOME/.local/share/mise/shims"
  fi

  # FIXME(termux): ble.sh: updating binders..../script/container: line 112:
  # 2764 Segmentation fault (core dumped) bash -i
  export BLE_ENABLED=false

  export CHEZMOI_PROFILE="$PROFILE"
  export CHEZMOI_ROOT="$PWD"
  export CHEZMOI_UPGRADE=true
  export CI=true

  if [ "${DEBUG:-}" = true ]; then
    set -- --debug "$@"
  fi

  if [ "${VERBOSE:-true}" = true ]; then
    set -- --verbose "$@"
  fi

  if [ "$USER" = test ]; then
    if ! id --user "$USER" >/dev/null 2>&1; then
      echo >&2 "Creating user: $USER"
      if command -v useradd >/dev/null; then
        # useradd -ms /bin/bash "$USER"
        useradd --create-home --shell=/bin/bash "$USER"
        # if groups | grep -qv wheel; then
        #   groupadd wheel
        # fi
      else
        # FIXME: user 'test' in use
        adduser -Ds /bin/bash "$USER" || true # -G wheel
      fi
    fi
    if groups | grep -qv wheel; then
      echo >&2 "Creating group: $USER"
      if command -v groupadd >/dev/null; then
        groups "$USER"
        groups
        groupadd wheel --users "$USER" || true
      else
        addgroup wheel || true
      fi
    fi
    if command -v usermod >/dev/null; then
      usermod -aG wheel "$USER"
    fi
    sed \
      -e 's/^# %wheel ALL=(ALL:ALL) NOPASSWD: ALL/%wheel ALL=(ALL:ALL) NOPASSWD: ALL/' \
      -i /etc/sudoers
  fi

  set -x
  # mkdir -p "$HOME/.local/bin"
  # mkdir -p "$HOME/.config/"{atuin,bash,bat,blesh,carapace/specs,curl,eza,helix,mise,nushell/{functions,modules,themes},procs,readline,ripgrep,sh/{functions,plugins},starship,wget,yamllint,zsh}
  # mkdir -p "$HOME/"{.brew-aliases,.config/{homebrew,psql},.local/share,.ssh/config.d}

  # if [ "$USER" = test ]; then
  #   # su "$USER" -c "pwd; ls -la; echo ${bootstrap[*]} $*"
  #   sudo -E "${bootstrap[@]}" "$@"
  # fi
  if [ -n "$PREFIX" ]; then
    # Install chezmoi with termux package manager to avoid error on tag:
    # latest: critical %s: unsupported platform\n android/386
    # x86_64: android/amd64
    # i686: android/386
    # aarch64, arm: exec format error
    command -v chezmoi >/dev/null || pkg install --quiet --yes chezmoi
    # "tls: failed to verify certificate: x509: certificate signed by unknown authority"
    command -v proot >/dev/null || pkg install --quiet --yes proot
    proot \
      -b "$PREFIX/etc/resolv.conf:/etc/resolv.conf" \
      -b "$PREFIX/etc/tls:/etc/ssl" \
      "${bootstrap[@]}" "$@"
  else
    "${bootstrap[@]}" "$@"
  fi

  mise run check

  mise run update

  # if command -v kcov >/dev/null; then
  #   export COVERAGE_OUTPUT="./coverage-$HOSTNAME"
  #   ./script/coverage # --collect-only
  # fi
  if command -v bats >/dev/null; then
    if [ -n "${TERM:-}" ] && [ "$TERM" != dumb ]; then
      ./script/test --pretty
    else
      ./script/test
    fi
  fi

  # if command -v goss >/dev/null; then
  #   # mise run goss validate
  #   cd ~/.config/goss
  #   goss validate
  # fi

  # Keep the container running
  # bash -i
  # bash -l
  # watch -n60 chezmoi status
}

run_container() {
  local name="$1"
  local image="$name"
  shift
  local tag=latest
  if [[ "$image" = *:* ]]; then
    tag="${image#*:}"
    name="${image%%:*}-$tag"
  else
    name="$image-$tag"
    image="$image:$tag"
  fi
  container "$@"
}

main() {
  if [ $# -eq 0 ]; then
    usage
    exit
  fi
  case "$1" in
  all)
    shift
    local images=(
      android # termux
      alpine
      # archlinux
      debian
      ubuntu
      fedora
      # freebsd
      # macos
    )
    for img in "${images[@]}"; do
      # --exit-code-from "$img-latest"
      run_container "$img" up \
        --abort-on-container-exit \
        --build \
        "$@"
      # -- --collect-only
    done
    # ls -la ./coverage-*
    # kcov \
    #   --dump-summary \
    #   --report-only \
    #   --merge \
    #   ./coverage \
    #   ./coverage-*
    # ls -la ./coverage
    ;;
  bootstrap)
    shift
    run_bootstrap "$@"
    ;;
  *) run_container "$@" ;;
  esac
}

main "$@"
